<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 		   
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:gpc="com.goldpricecafe.mobile.*" 	
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   preloader="SlicedCirclePreloader"
			   resizeForSoftKeyboard="true"
			   initialize="init()" 
			   resize="resizeHandler()" 
			   creationComplete="creationComplatedHandler()"  >
	
	<s:layout>
		<s:VerticalLayout paddingLeft="2" paddingRight="2" paddingTop="2" paddingBottom="2"/>
	</s:layout>
	
	<fx:Style source="goldpricecafe.css"/>
	<fx:Metadata>
		
	</fx:Metadata>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="settings" />
		<s:State name="fullscreen"/>
	</s:states>
	
	<fx:Declarations>
		
		<s:RadioButtonGroup id="unitsRedioGroup" change="weightUnits = unitsRedioGroup.selectedValue.toString()" />
		<s:RadioButtonGroup id="chartTypeRadioGroup" change="chartType = chartTypeRadioGroup.selectedValue.toString()" />
		<mx:CurrencyFormatter id="buttonsCurrFormat" 
							  currencySymbol="" 
							  decimalSeparatorTo="." 
							  error="0.00" 
							  precision="2" 
							  thousandsSeparatorTo="," 
							  useThousandsSeparator="true" 
							  useNegativeSign="false" />
		<s:Animate id="fader"
				   duration="500"
				   repeatBehavior="reverse"
				   repeatCount="0">
			<s:SimpleMotionPath property="alpha" valueFrom="1.0" valueTo="0.0" />
		</s:Animate>

	</fx:Declarations>
	
	<fx:Script>

		<![CDATA[	

			import com.goldpricecafe.mobile.Constants;
			
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			
			protected static const DATA_PROVIDER_CLASS:Class = com.goldpricecafe.mobile.DataProvider;
			
			//////////////////////////////////////////////////////
			//                                     				//
			//					Properties						//
			//													//
			//////////////////////////////////////////////////////
			
			/** 
			 * Chart type. Use following constants from com.goldpricecafe.mobile.Constants:
			 * GOLD, SILVER, PLATINUM, PALLDIUM, GLD_SLV_RATIO, GLD_PLT_RATIO 
			 */
			[Bindable]
			public function set chartType( type:String ) : void {
				
				_chartType = type;
				chartPanel.chartType = type;
				chartTypeRadioGroup.selectedValue = type;
				updateChartData();
				
			}	
			public function get chartType() : String {
				
				return _chartType;
			}
			
			/**
			 * Weight units. Use following constants from com.goldpricecafe.mobile.Constants:
			 * UNITS_GR, UNITS_OZ
			 */
			[Bindable]
			public function set weightUnits( units:String ) : void {
				
				_weightUnits = units;
				chartPanel.weightUnits = units;
				unitsRedioGroup.selectedValue = units;
				
				updateChartData();
				
			}	
			public function get weightUnits() : String {
				
				return _weightUnits;
			}
			
			/**
			 * Weight units. Use following constants from com.goldpricecafe.mobile.Constants:
			 * RANGE_3DAYS, RANGE_1DAY, RANGE_HISTORY
			 */			
			[Bindable]
			public function set dataRange( range:uint ) : void {
				
				_dataRange = range;
				dataRangeBar.selectedIndex = range;
				chartPanel.dataRange = range;				
				
			}
			public function get dataRange() : uint {
				
				return _dataRange;
			}
			
			/**
			 * Currency. Use one of the values from com.goldpricecafe.mobile.Constants.CURRENCIES
			 */			
			[Bindable]
			public function set currency( currency:String ) : void {
				
				_currency = currency;
				chartPanel.currency = currency;
				//currencyCombo.selectedItem = currency;
				//currencyCombo.prompt = currency.toUpperCase();
				
				updateChartData();
				currencyBtn.label = currency;
				
			}	
			public function get currency( ) : String {
				
				return _currency;
				
			}
			
			[Bindable]
			public function set busy( val:Boolean ) : void {
				
				throbber.visible = val;
			}
			public function get busy() : Boolean {
				
				return throbber.visible;
			}
			
			//////////////////////////////////////////////////////
			//                                     				//
			//					Protected fields				//
			//													//
			//////////////////////////////////////////////////////
			
			protected var _screenSize:uint = Constants.SCREEN_BIG;
			
			/* Current data */
			
			protected var _dataProvider:IDataProvider;
			
			/* Currencies */
			
			protected var _currency:String;
			
			/* Chart type */
			
			protected var _chartType:String;
			
			/* Weight units */			
			
			protected var _weightUnits:String;
			
			/* Data ranges */
			
			protected var _dataRange:uint;
			
			/* Prices */
			
			protected var _gldPrices:Array;
			protected var _gldSlvRatios:Array;
			protected var _gldPltRatios:Array;
			protected var _gldPldRatios:Array;
			
			/* Next update */
			
			protected var _nextUpdate:Date = new Date();
			protected var _timer:Timer = new Timer(1000);
			
			
			//////////////////////////////////////////////////////
			//                                     				//
			//					Protected methods				//
			//													//
			//////////////////////////////////////////////////////	
			

			protected function updateHeader() : void {
				
				var now:Date = new Date();
				var sec:int = Math.round( (_nextUpdate.getTime() - now.getTime() )/1000 );
				var min:int = sec/60;
				sec = sec % 60;
				
				if( sec <= 0 ) {
					
					timeLabel.text = "waiting";
					fader.end();
					fader.play([timeLabel]);
					
				} else {
					
					fader.end();
					timeLabel.text = ((min < 10) ? "0" + min.toString() : min.toString()) + ":" +
									 ((sec < 10) ? "0" + sec.toString() : sec.toString());
				}
				
			}
			
			protected function updateButtons() : void {
				
				if(!_gldPrices || _gldPrices.length == 0 ) return;
				
				var lastPrice:Number;
				var i:int = _gldPrices.length-1;
				
				while( i >= 0 && isNaN(lastPrice = calculatePrices(i, Constants.GOLD )[0]) ) {
					i--;
				}
				goldBtn.label = "Gld: " + buttonsCurrFormat.format(lastPrice);
				
				i = _gldPrices.length-1;
				while( i >= 0 && isNaN(lastPrice = calculatePrices(i, Constants.SILVER )[0]) ) {
					i--;
				}
				silverBtn.label = "Slv: " + buttonsCurrFormat.format(lastPrice);				

				i = _gldPrices.length-1;
				while( i >= 0 && isNaN(lastPrice = calculatePrices(i, Constants.PLATINUM )[0]) ) {
					i--;
				}
				platinumBtn.label = "Plt: " + buttonsCurrFormat.format(lastPrice);
				
				i = _gldPrices.length-1;
				while( i >= 0 && isNaN(lastPrice = calculatePrices(i, Constants.PALLADIUM )[0]) ) {
					i--;
				}
				palladiumBtn.label = "Plt: " + buttonsCurrFormat.format(lastPrice);				
			}
						
				
			protected function scaleStyles() : void {
				
				var ratio:Number = unscaledWidth/1024;
				
				if( styleManager ) {
					
					var style:CSSStyleDeclaration;
					
					style = styleManager.getStyleDeclaration( ".fontBig" );
					style.setStyle( "fontSize",Math.round( style.getStyle("fontSize")*ratio) );
					style = styleManager.getStyleDeclaration( ".fontMedium" );
					style.setStyle( "fontSize",Math.round( style.getStyle("fontSize")*ratio) );
					style = styleManager.getStyleDeclaration( ".fontSmall" );
					style.setStyle( "fontSize",Math.round( style.getStyle("fontSize")*ratio) );
				}
				
			}
			
			protected function updateChartData() : void {
				
				if( !_dataProvider ) return;
				
				var data:Object = _dataProvider.getData(currency);
				
				_gldPrices = data[Constants.GOLD];
				_gldSlvRatios = data[Constants.GLD_SLV_RATIO];
				_gldPltRatios = data[Constants.GLD_PLT_RATIO];
				_gldPldRatios = data[Constants.GLD_PLD_RATIO];				
				
				var data1:ArrayList = new ArrayList();
				var data2:ArrayList = new ArrayList();
				var data3:ArrayList = new ArrayList();
				
				if( _gldPrices != null ) {
					
					for( var i:uint=0; i<_gldPrices.length; i++ ) {
						
						if(i >= _gldPrices.length) break;
						
						var time:int = _gldPrices[i][0];
						var prices:Array = calculatePrices(i,_chartType);
						
						data1.addItem( { "time":time, "value":prices[0] } );
						data2.addItem( { "time":time, "value":prices[1] } );
						data3.addItem( { "time":time, "value":prices[2] } );	
						
					}
					
				}
				
				chartPanel.serie1.dataProvider = data1;				
				chartPanel.serie2.dataProvider = data2;
				chartPanel.serie3.dataProvider = data3;	
				
				updateButtons();
				
			}
			
			
			protected function calculatePrices( index:uint, chartType:String ) : Array {
				
				
				if((!_gldPrices) || (index > _gldPrices.length) ) return [null,null,null];
				
				var wightScale:Number = ( _weightUnits == Constants.UNITS_GR ) ? Constants.GROZ_RATIO : 1.0;
				var prices:Array = [null, null, null];
				var i:uint;
				
				switch( chartType ) {
					
					case Constants.GOLD :
						
						for( i=0; i<3; i++ ) 
						{							
							prices[i] = _gldPrices[index][i+1] * wightScale;							
						}		
						return prices;
						
					case Constants.SILVER :
						
						if((!_gldSlvRatios) || (index > _gldSlvRatios.length) ) return [null,null,null];			
						for( i=0; i<3; i++ ) 
						{				
							prices[i] = _gldPrices[index][i+1] / _gldSlvRatios[index][i+1] * wightScale;						
						}				
						return prices;	
						
					case Constants.PLATINUM :
						
						if((!_gldPltRatios) || (index > _gldPltRatios.length) ) return [null,null,null];
						for( i=0; i<3; i++ ) 
						{	
							prices[i] = _gldPrices[index][i+1] / _gldPltRatios[index][i+1] * wightScale;	
						}
						return prices;		
						
					case Constants.PALLADIUM :
						
						if((!_gldPldRatios) || (index > _gldPldRatios.length) ) return [null,null,null];
						for( i=0; i<3; i++ ) {							
							prices[i] = _gldPrices[index][i+1] / _gldPldRatios[index][i+1] * wightScale;						
						}		
						return prices;							
						
					case Constants.GLD_PLT_RATIO :
						
						if((!_gldSlvRatios) || (index > _gldSlvRatios.length) ) return [null,null,null];
						for( i=0; i<3; i++ ) 
						{						
							prices[i] = _gldPltRatios[index][i+1];						
						}
						
						return prices;						
						
					case Constants.GLD_SLV_RATIO :
						
						if((!_gldSlvRatios) || (index > _gldSlvRatios.length) ) return [null,null,null];
						for( i=0; i<3; i++ ) 
						{							
							prices[i] = _gldSlvRatios[index][i+1];							
						}				
						return prices;
						
					default:
						
						return [null,null,null];					
						
				}				
				
				
			}
			
			//////////////////////////////////////////////////////
			//                                     				//
			//					Event handlers					//
			//													//
			//////////////////////////////////////////////////////
			
			protected function init() : void {
				
				currentState = "normal";
				_nextUpdate = new Date();
							
				/*if(!CustomStyleManager.loadStyles()) {
				CustomStyleManager.saveStyles();
				}*/
				
			}			
			
			protected function creationComplatedHandler() : void {
				
				/* Scale fonts to screen size */
				scaleStyles();
				
				/* Fill currencies popup */
				for( var i:uint = 0; i<Constants.CURRENCIES.length; i++ ) {
					
					var label:Label = new Label();
					label.text = Constants.CURRENCIES[i];
					label.styleName = "fontMedium";
					label.addEventListener(MouseEvent.CLICK,function(e:Event) : void {
						currencyPopUp.displayPopUp = false;
						currency = e.target.text.toUpperCase();
					});
					
					currencyChooser.addElement(label);
				}				
				
				chartType = Constants.GOLD;
				currency = "USD";
				weightUnits = Constants.UNITS_OZ;
				dataRange = Constants.RANGE_1DAY;		
				
				/* Initialize gestures support */
				Multitouch.inputMode = MultitouchInputMode.GESTURE;
				
				/* Initialize data provider */
				_dataProvider = new DATA_PROVIDER_CLASS();
				_dataProvider.addEventListener( "newData", newDataHandler );
				
				/* Initialize timer */
				_timer.addEventListener( TimerEvent.TIMER,timerHandler );
				_timer.start();
				
			}
			
			protected function resizeHandler() : void {
				
			}	
			
			protected function newDataHandler( e:Event ) : void {
				
				updateChartData();			
				_nextUpdate = _dataProvider.getNextUpdateTime();
				
				busy = false;
				
			}
			
			protected function timerHandler( e:Event ) : void {
				
				updateHeader();
				
			}
						
			
			
		]]>
	</fx:Script>
	
	<!--
	
	//////////////////////////////////////////////////////
	//                                     				//
	//						Skin						//
	//													//
	//////////////////////////////////////////////////////
	
	-->
	
	<s:VGroup id="normalVGroup" width="100%" height="100%" gap="0">
		
		<s:VGroup id="northPanel" width="100%" excludeFrom="settings" gap="0">
		
			<s:HGroup width="100%">
				<s:Label id="headerLabel" text="Next Live Price Update " styleName="fontBig" />
				<s:Spacer width="100%"/>
				<s:Label id="timeLabel" styleName="fontBig" />
			</s:HGroup>
			
			
			<s:HGroup id="metalBtnGroup" width="100%" verticalAlign="middle" excludeFrom="fullscreen,settings">
				
				<s:VGroup width="100%">	
					
					<s:HGroup width="100%">
						<!-- Curency button -->
						<s:Button id="currencyBtn" minHeight="0" label="USD" width="40%" styleName="button bigButton fontMedium" click="popupFill.color = currencyBtn.getStyle('chromeColor'), currencyPopUp.displayPopUp = true" />	
						<!-- Metal buttons-->
						<s:RadioButton id="goldBtn" minHeight="0" group="{chartTypeRadioGroup}" value="{Constants.GOLD}" width="100%" styleName="button bigButton fontMedium" label="Gld:" />
						<s:RadioButton id="silverBtn" minHeight="0" group="{chartTypeRadioGroup}" value="{Constants.SILVER}" width="100%" styleName="button bigButton fontMedium" label="Slv:" />
						<s:RadioButton id="platinumBtn" minHeight="0" group="{chartTypeRadioGroup}" value="{Constants.PLATINUM}" width="100%" styleName="button bigButton fontMedium" label="Plt:" />
						<s:RadioButton id="palladiumBtn" minHeight="0" group="{chartTypeRadioGroup}" value="{Constants.PALLADIUM}" width="100%" styleName="button bigButton fontMedium" label="Pld:" />
					</s:HGroup>
					
					<!-- Currency popup -->
					<s:PopUpAnchor id="currencyPopUp" popUpPosition="below">
						<s:TileGroup width="{width/2}" height="{height/2}" id="currencyChooser" includeInLayout="false" clipAndEnableScrolling="true">
							<s:Rect x="0" y="0" width="{width/2}" height="{height/2}" includeInLayout="false">
								<s:fill>
									<s:SolidColor id="popupFill" color="{getStyle('backgroundColor')}" alpha="0.8"/>
								</s:fill>
							</s:Rect>
						</s:TileGroup>
					</s:PopUpAnchor>
					
				</s:VGroup>				
				
				<s:Spacer width="2"/>
				
				<!-- Units radio group -->
				<s:VGroup width="0%" styleName="fontSmall" gap="5" height="100%">			
					<s:RadioButton id="radioOunce" group="{unitsRedioGroup}" styleName="radioBtn fontVerySmall" label="OZ" value="{Constants.UNITS_OZ}" toolTip="Ounces" />
					<s:RadioButton id="radioGram" group="{unitsRedioGroup}" styleName="radioBtn fontVerySmall" label="GR" value="{Constants.UNITS_GR}" toolTip="Grams" />
				</s:VGroup>
				
			</s:HGroup>	
		
		</s:VGroup>

		<!-- Chart -->
		
		<gpc:Chart id="chartPanel" />
		
		<!-- Chart options group -->
		
		<s:VGroup id="southPanel" width="100%" excludeFrom="settings, fullscreen" gap="0">
			
			<s:HGroup id="chartDataBtnGroup" width="100%" verticalAlign="middle" >
				
				<!-- Chart data range buttons -->
				<s:ButtonBar id="dataRangeBar" requireSelection="true" change="dataRange = dataRangeBar.selectedIndex" styleName="button fontSmall" width="200%">
					<s:ArrayCollection source="['Last 3 Days','Today','History']"/>
				</s:ButtonBar>
				
				<!--s:Spacer width="10"/-->
				
				<!-- Prices ratio buttons -->
				<s:RadioButton id="gldslvratioBtn" group="{chartTypeRadioGroup}" value="{Constants.GLD_SLV_RATIO}" label="Gld/Slv Ratio" width="100%" styleName="button fontSmall" />				
				<s:RadioButton id="gldpltratioBtn" group="{chartTypeRadioGroup}" value="{Constants.GLD_PLT_RATIO}" label="Gld/Plt Ratio" width="100%" styleName="button fontSmall" />
				
				<!--s:Spacer width="10"/-->
				
				<s:Button id="settingsBtn" label="Settings" width="100%" styleName="button fontSmall" click="currentState = 'settings'" />
				
			</s:HGroup>
			
			<!-- Track your stack -->
		
			<s:Spacer height="10"/>
			
			<s:Label id="trackYourStackLabel" text="Track Your Stack" styleName="fontSmall" />
			
			<s:HGroup id="trackYourStackGroup" width="100%" verticalAlign="justify" >
				
				<s:VGroup width="20%" height="100%" gap="2">
					<s:Label id="pmcGoldLabel" text="Gold Oz:" styleName="fontVerySmall" />
					<s:TextInput id="goldOzCalc" maxChars="6" text="0.00" height="32" width="100%" />
					<s:Label id="accGold" text="0.00 USD" styleName="fontVerySmall" />				
				</s:VGroup>
				<s:VGroup width="20%" height="100%" gap="2">
					<s:Label id="pmcSilverLabel" text="Silver Oz:" styleName="fontVerySmall" />
					<s:TextInput id="silverOzCalc" maxChars="6" text="0.00" height="32" width="100%" />
					<s:Label id="accSilver" text="0.00 USD" styleName="fontVerySmall" />				
				</s:VGroup>
				<s:VGroup width="20%" height="100%" gap="2">
					<s:Label id="pmcPlatinumLabel" text="Platinum Oz:" styleName="fontVerySmall" />
					<s:TextInput id="platinumOzCalc" maxChars="6" text="0.00" height="32" width="100%" />
					<s:Label id="accPlatinum" text="0.00 USD" styleName="fontVerySmall" />				
				</s:VGroup>
				<s:VGroup width="20%" height="100%" gap="2">
					<s:Label id="pmcPalladiumLabel" text="Palladium Oz:" styleName="fontVerySmall" />
					<s:TextInput id="palladiumOzCalc" maxChars="6" text="0.00" height="32" width="100%" />
					<s:Label id="accPalladium" text="0.00 USD" styleName="fontVerySmall" />				
				</s:VGroup>
				<s:VGroup width="20%" height="100%" gap="2">
					<s:Spacer height="100%"/>
					<s:Button id="indivChartBtn" label="Chart My Stack!" styleName="button bigButton fontMedium"/>
					<s:Label id="totalWorth" text="Total: 0.00 USD" styleName="fontVerySmall" />				
				</s:VGroup>		
				
			</s:HGroup>
			
		</s:VGroup>
		
		<!-- Settings screen -->
		
		<s:HGroup id="settingsHGroup" width="100%" includeIn="settings" >
			<gpc:SettingsPanel id="settingsPanel"/>
			<s:VGroup>
				<s:Button id="cancelBtn" label="Reset" styleName="button fontMedium" width="100%" click="settingsPanel.reset()" />
				<s:Button id="okBtn" label="OK" styleName="button fontMedium" width="100%" click="CustomStyleManager.saveStyles(); currentState = 'normal'" />
				<s:Spacer height="100%"/>
			</s:VGroup>
		</s:HGroup>	
		
	</s:VGroup>
	

	<!-- Busy screen -->
	
	<s:HGroup x="0" y="0" width="{width}" height="{height}" includeInLayout="false" excludeFrom="settings">
		<s:Spacer width="25%"/>
		<s:VGroup width="50%" height="100%">
			<s:Spacer height="20%"/>
			<s:BusyIndicator id="throbber" alpha="0.5" visible="true" width="100%" height="60%"/>
			<s:Spacer height="20%"/>			
		</s:VGroup>
		<s:Spacer width="25%"/>
	</s:HGroup>	
	
</s:Application>
