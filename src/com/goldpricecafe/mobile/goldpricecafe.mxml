<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 		   
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:gpc="com.goldpricecafe.mobile.*" 	
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   preloader="SlicedCirclePreloader"
			   resizeForSoftKeyboard="true"
			   styleName="application"
			   initialize="init()" 
			   resize="resizeHandler()" 
			   creationComplete="creationComplatedHandler()"  >
	
	<s:layout>
		<s:VerticalLayout paddingLeft="2" paddingRight="2" paddingTop="2" paddingBottom="2"/>
	</s:layout>

	<fx:Style source="assets/goldpricecafe_skins.css"/>
	<fx:Style source="assets/goldpricecafe_fonts.css"/>
	<fx:Style source="assets/goldpricecafe_styles.css"/>

	
	<fx:Metadata>	
	</fx:Metadata>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="settings" />
		<s:State name="fullscreen"/>
	</s:states>
	
	<fx:Declarations>
		
		<s:RadioButtonGroup id="unitsRedioGroup" change="weightUnits = unitsRedioGroup.selectedValue.toString()"/>
		<s:RadioButtonGroup id="chartTypeRadioGroup" change="chartType = chartTypeRadioGroup.selectedValue.toString()"/>
		<s:RadioButtonGroup id="rangeRadioGroup" change="dataRange = Number(rangeRadioGroup.selectedValue)"/>
		
		<s:NumberFormatter  id="currencyFormat"						  
							  decimalSeparator="." 
							  errorText="0.00" 
							  fractionalDigits="2"
							  trailingZeros="true"
							  useGrouping="true"
							  groupingSeparator="," />
		<s:NumberFormatter id="amountFormat"  
							  decimalSeparator="." 
							  errorText="0.00" 
							  fractionalDigits="2"
							  trailingZeros="true"
							  useGrouping="true"
							  groupingSeparator=","/>
	
		
		<s:Animate id="loadingFader"
				   duration="500"
				   repeatBehavior="reverse"
				   repeatCount="0">
			<s:SimpleMotionPath property="alpha" valueFrom="1.0" valueTo="0.0" />
		</s:Animate>
		
		<s:Animate id="chartUpdatedfader"
				   duration="7000"
				   repeatCount="1">
			<s:SimpleMotionPath property="alpha" valueFrom="1.0" valueTo="0.0" />
		</s:Animate>

	</fx:Declarations>
	
	<fx:Script>

		<![CDATA[	
			
			import com.goldpricecafe.mobile.Constants;
			import com.goldpricecafe.mobile.skins.ButtonBarFirstButton;		
			import mx.collections.ArrayList;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import spark.skins.spark.DefaultComplexItemRenderer;
			
			
			protected static const DATA_PROVIDER_CLASS:Class = com.goldpricecafe.mobile.BlazeDataProvider;
			
			//////////////////////////////////////////////////////
			//                                     				//
			//					Properties						//
			//													//
			//////////////////////////////////////////////////////
			
			/** 
			 * Chart type. Use following constants from com.goldpricecafe.mobile.Constants:
			 * GOLD, SILVER, PLATINUM, PALLDIUM, GLD_SLV_RATIO, GLD_PLT_RATIO 
			 */
			[Bindable]
			public function set chartType( type:String ) : void {
				
				_chartType = type;
				chartPanel.chartType = type;
				chartTypeRadioGroup.selectedValue = type;
				
				if(_chartType == Constants.MY_STACK) {
					updateMyStack();
				}
				
				if(_chartData) {
					chartPanel.setLiveData(_chartData[_chartType]);
				}
				
				if(_chartType != Constants.GOLD ) {
					
					if(_dataRange == Constants.RANGE_HISTORY ) {
						dataRange = Constants.RANGE_3DAYS;
					}
					
					historyBtn.enabled = false;
					
				} else {
					
					historyBtn.enabled = true;
					
				}
				
				updateHeader();
				
			}	
			public function get chartType() : String {
				
				return _chartType;
			}
			
			/**
			 * Weight units. Use following constants from com.goldpricecafe.mobile.Constants:
			 * UNITS_GR, UNITS_OZ
			 */
			[Bindable]
			public function set weightUnits( units:String ) : void {
				
				_weightUnits = units;
				chartPanel.weightUnits = units;
				unitsRedioGroup.selectedValue = units;

				updateMyStack();
				updateHeader();
				
			}	
			public function get weightUnits() : String {
				
				return _weightUnits;
			}
			
			/**
			 * Weight units. Use following constants from com.goldpricecafe.mobile.Constants:
			 * RANGE_3DAYS, RANGE_1DAY, RANGE_HISTORY
			 */			
			[Bindable]
			public function set dataRange( range:uint ) : void {
				
				_dataRange = range;
				rangeRadioGroup.selectedValue = range;
				chartPanel.dataRange = range;
				
				/* Update data */
				if(_dataRange == Constants.RANGE_HISTORY ) {
					
					chartPanel.setHistData(_dataProvider.getHistory(currency));
					
				} else {
					
					_chartData = _dataProvider.getData(currency);
					chartPanel.setLiveData(_chartData[_chartType]);
					
				}				
	
			}
			public function get dataRange() : uint {
				
				return _dataRange;
			}
			
			/**
			 * Currency. Use one of the values from com.goldpricecafe.mobile.Constants.CURRENCIES
			 */			
			[Bindable]
			public function set currency( currency:String ) : void {
				
				_currency = currency;
				currencyCombo.selectedItem = currency;
				
				/* Update data */
				if(_dataRange == Constants.RANGE_HISTORY ) {

					chartPanel.setHistData(_dataProvider.getHistory(currency));
					
				} else {
					
					_chartData = _dataProvider.getData(currency);
					chartPanel.setLiveData(_chartData[_chartType]);
					
				}
				
				/* Find last metal prices */
				findLastPrices();
				
				/* Update header */
				updateHeader();
				
				/* Update "My Stack" labels */
				updateMyStack();
				
				chartPanel.currency = currency;								
				
			}	
			public function get currency( ) : String {
				
				return _currency;
				
			}
			
			/** Amount of gold in "My Stack" expressed in current weight units.
			 *  Internaly it is stored in ounces.
			 */
			[Bindable]
			public function set myStackGold( val:Number ) : void {
				
				if (weightUnits == Constants.UNITS_GR ) {
					_myStack[Constants.GOLD] = val * Constants.GROZ_RATIO;
				} else {
					_myStack[Constants.GOLD] = val;
				}
				
				updateMyStack();
				
			}
			public function get myStackGold() : Number {
				
				if (weightUnits == Constants.UNITS_GR ) {
					return _myStack[Constants.GOLD] / Constants.GROZ_RATIO;
				} else {
					return _myStack[Constants.GOLD];
				}
				
			}	
			
			/** Amount of silver in "My Stack" expressed in current weight units.
			 *  Internaly it is stored in ounces.
			 */
			[Bindable]
			public function set myStackSilver( val:Number ) : void {
				
				if (weightUnits == Constants.UNITS_GR ) {
					_myStack[Constants.SILVER] = val * Constants.GROZ_RATIO;
				} else {
					_myStack[Constants.SILVER] = val;
				}
				
				updateMyStack();
				
			}
			public function get myStackSilver() : Number {
				
				if (weightUnits == Constants.UNITS_GR ) {
					return _myStack[Constants.SILVER] / Constants.GROZ_RATIO;
				} else {
					return _myStack[Constants.SILVER];
				}
				
			}
			
			/** Amount of platinum in "My Stack" expressed in current weight units.
			 *  Internaly it is stored in ounces.
			 */
			[Bindable]
			public function set myStackPlatinum( val:Number ) : void {
				
				if (weightUnits == Constants.UNITS_GR ) {
					_myStack[Constants.PLATINUM] = val * Constants.GROZ_RATIO;
				} else {
					_myStack[Constants.PLATINUM] = val;
				}
				
				updateMyStack();
				
			}
			public function get myStackPlatinum() : Number {
				
				if (weightUnits == Constants.UNITS_GR ) {
					return _myStack[Constants.PLATINUM] / Constants.GROZ_RATIO;
				} else {
					return _myStack[Constants.PLATINUM];
				}
				
			}
			
			/** Amount of palladium in "My Stack" expressed in current weight units.
			 *  Internaly it is stored in ounces.
			 */
			[Bindable]
			public function set myStackPalladium( val:Number ) : void {
				
				if (weightUnits == Constants.UNITS_GR ) {
					_myStack[Constants.PALLADIUM] = val * Constants.GROZ_RATIO;
				} else {
					_myStack[Constants.PALLADIUM] = val;
				}
				
				updateMyStack();
				
			}
			public function get myStackPalladium() : Number {
				
				if (weightUnits == Constants.UNITS_GR ) {
					return _myStack[Constants.PALLADIUM] / Constants.GROZ_RATIO;
				} else {
					return _myStack[Constants.PALLADIUM];
				}
				
			}			
			
			[Bindable]
			public function set busy( val:Boolean ) : void {
				
				throbber.visible = val;
			}
			public function get busy() : Boolean {
				
				return throbber.visible;
			}
			
			
			//////////////////////////////////////////////////////
			//                                     				//
			//					Protected fields				//
			//													//
			//////////////////////////////////////////////////////
			
			protected var _screenSize:uint = Constants.SCREEN_BIG;
			
			/* Current data */
			
			protected var _dataProvider:IDataProvider;
			
			/* Currencies */
			
			protected var _currency:String = "";
			
			/* Chart type */
			
			protected var _chartType:String = "";
			
			/* Weight units */			
			
			protected var _weightUnits:String = "";
			
			/* Data ranges */
			
			protected var _dataRange:uint;
			
			/* Prices */
			
			protected var _chartData:Object = {};
			protected var _myStack:Object = {};
			protected var _currentPrices:Object = {};
			protected var _currentPricesDate:Date;
			
			/* Next update */
			
			protected var _nextUpdate:Date = new Date();
			protected var _timer:Timer = new Timer(1000);
			
			protected var _firstLoad:Boolean = true;
			
			
			//////////////////////////////////////////////////////
			//                                     				//
			//					Protected methods				//
			//													//
			//////////////////////////////////////////////////////	
			

			protected function updateHeader() : void {
				
				if(_dataProvider.isWeekend()) {
					
					headerLabel.text = 'The Market is Closed.';
					timeLabel.visible = false;
					
				} else {
					
					if(dataRange == Constants.RANGE_HISTORY) {
						
						headerLabel.text = "Next Live Price Update: ";
						
					} else {
					
						var label:String;
						var value:String = currencyFormat.format(_currentPrices[_chartType]);
					
						switch(_chartType) {
							
							case Constants.GLD_SLV_RATIO : 
								label = "GLD/SLV:  " + value; 
								break;
							case Constants.GLD_PLT_RATIO : 
								label = "GLD/PLT:  " + value; 
								break;
							case Constants.GLD_PLD_RATIO : 
								label = "GLD/PLD:  " + value; 
								break;
							case Constants.MY_STACK : 
								label = "The Stack:  " + value + " " + _currency.toUpperCase(); 
								break;
							default: 
								if(_weightUnits == Constants.UNITS_GR) {
									value = currencyFormat.format(_currentPrices[_chartType] * Constants.GROZ_RATIO);
								}
								label = firstUp(_chartType) + ":  " + value + " " + _currency.toUpperCase();
							
						}
						headerLabel.text = label + "  ";
					
					}
								
					var now:Date = new Date();
					var sec:int = _nextUpdate ? Math.round( (_nextUpdate.getTime() - now.getTime() )/1000 ) : 0;
					var min:int = sec/60;
					sec = sec % 60;
					
					if( min <= 0 && sec <= 0 ) {
						
						timeLabel.text = "waiting";
						loadingFader.end();
						loadingFader.play([timeLabel]);
						
					} else {
						
						loadingFader.end();
						timeLabel.alpha = 1.0;
						timeLabel.text = ((min < 10) ? "0" + min.toString() : min.toString()) + ":" +
										 ((sec < 10) ? "0" + sec.toString() : sec.toString());
					}
					timeLabel.visible = true;
				
				}
				
			}
			
			protected function scaleStyles() : void {
				
				var ratio:Number = unscaledWidth/1024;
				
				if( styleManager ) {
					
					var style:CSSStyleDeclaration;
					
					style = styleManager.getStyleDeclaration( ".fontBig" );
					style.setStyle( "fontSize",Math.round( style.getStyle("fontSize")*ratio) );
					style = styleManager.getStyleDeclaration( ".fontMedium" );
					style.setStyle( "fontSize",Math.round( style.getStyle("fontSize")*ratio) );
					style = styleManager.getStyleDeclaration( ".fontSmall" );
					style.setStyle( "fontSize",Math.round( style.getStyle("fontSize")*ratio) );
					
				}
				
			}
			
			protected function updateMyStack() : void {
				
				_currentPrices[Constants.MY_STACK] = 0;
				
				for( var type:String in _myStack ) {
					_currentPrices[Constants.MY_STACK] += _myStack[type] * _currentPrices[type];
				}
				
				goldOzCalc.numericValue = myStackGold;
				silverOzCalc.numericValue = myStackSilver;
				palladiumOzCalc.numericValue = myStackPalladium;
				platinumOzCalc.numericValue = myStackPlatinum;
				
				/* Update chart if visible */
				if( (chartType == Constants.MY_STACK) && (_chartData) ) {
					chartMyStack();
					chartPanel.setLiveData(_chartData[Constants.MY_STACK]);
				}
				
			}
			
			protected function lastPrice( type:String, ounces:Boolean = true ) : Number {
				
				var i:int;
				var price:Number = 0;
				
				if(_chartData && _chartData[type])
				{		
					i = _chartData[type].length-1;
					while( (i>=0) && isNaN( price = _chartData[type][i][Constants.TODAY]) ) {
						i--;
					}
					
					if(type == Constants.GOLD && i>=0 ) {
						_currentPricesDate = _chartData[type][i][Constants.TIME];
					}
				}
				
				return price;
				
			}
								
			
			protected function findLastPrices() : void {
				
				_currentPrices[Constants.GOLD] = lastPrice(Constants.GOLD);
				_currentPrices[Constants.SILVER] = lastPrice(Constants.SILVER);
				_currentPrices[Constants.PLATINUM] = lastPrice(Constants.PLATINUM);
				_currentPrices[Constants.PALLADIUM] = lastPrice(Constants.PALLADIUM);
				_currentPrices[Constants.GLD_SLV_RATIO] = lastPrice(Constants.GLD_SLV_RATIO);
				_currentPrices[Constants.GLD_PLT_RATIO] = lastPrice(Constants.GLD_PLT_RATIO);
				
			}

			
			protected function chartMyStack() : void {
				
				_chartData[Constants.MY_STACK] = [];
				var days:Array = [Constants.TODAY,Constants.ONE_DAY_AGO,Constants.TWO_DAYS_AGO];
				
				for( var i:uint = 0; i < _chartData[Constants.GOLD].length; i++ ) {
					
					_chartData[Constants.MY_STACK][i] = {};
					_chartData[Constants.MY_STACK][i][Constants.TIME] = _chartData[Constants.GOLD][i][Constants.TIME];
					
					for( var j:int = 0; j<days.length; j++ ) {
						
						var day:String = days[j];
						var sum:Number  = 0;
						
						for( var type:String in _myStack ) {
							sum += _myStack[type] * _chartData[type][i][day];
						}
						
						_chartData[Constants.MY_STACK][i][day] = sum;
						
					}
				}
				
			}
			
			protected function showChartUpdated() : void {
				
				chartUpdatedfader.end();

				var p:Point = new Point(0,0);
				p = chartPanel.serieMain.localToGlobal( p );
				p = chartPanel.globalToLocal( p );
				
				chartUpdatedLbl.left = p.x + 15;
				chartUpdatedLbl.top = p.y + 5;
				chartUpdatedLbl.visible = true;
				
				chartUpdatedfader.play([chartUpdatedLbl]);
				chartUpdatedfader.addEventListener(EffectEvent.EFFECT_END, function(e:Event) {
					chartUpdatedLbl.visible = false;
				});
				
			}
						
			
			protected function firstUp( val:String ) : String {
				
				if( val && val.length > 0 ) {
					
					return val.substr(0,1).toUpperCase() +  val.substring(1).toLowerCase();
					
				} else {
					
					return val;
				}
			}			
			
			//////////////////////////////////////////////////////
			//                                     				//
			//					Event handlers					//
			//													//
			//////////////////////////////////////////////////////
			
			protected function init() : void {
				
				currentState = "normal";
				_nextUpdate = new Date();
				
				
							
				/*if(!CustomStyleManager.loadStyles()) {
				CustomStyleManager.saveStyles();
				}*/
				
			}			
			
			protected function creationComplatedHandler() : void {
				
				scaleStyles();
				
				/* Initialize data provider */
				_dataProvider = new DATA_PROVIDER_CLASS();
				_dataProvider.addEventListener( "newData", newDataHandler );
				_dataProvider.addEventListener( "historyLoaded", historyLoadedHandler );
				
				/* Iniialize MyStack */
				_myStack[Constants.GOLD] = 0;
				_myStack[Constants.SILVER] = 0;
				_myStack[Constants.PLATINUM] = 0;
				_myStack[Constants.PALLADIUM] = 0;
				
				/* Stage orientation handler initialization */
				this.addEventListener(Event.ADDED_TO_STAGE, function() : void  {
					stage.addEventListener(StageOrientationEvent.ORIENTATION_CHANGE, orientationChangeHandler);
				});
				
				/* Initialize gestures support */
				Multitouch.inputMode = MultitouchInputMode.GESTURE;
				
				/* Initial state */
				chartType = Constants.GOLD;
				currency = "USD";
				weightUnits = Constants.UNITS_OZ;
				dataRange = Constants.RANGE_1DAY;
				
				/* Initialize timer */
				_timer.addEventListener( TimerEvent.TIMER,timerHandler );
				_timer.start();				
			
				
			}
			
			protected function orientationChangeHandler(event:StageOrientationEvent):void
			{
				/*if(stage.deviceOrientation == StageOrientation.UPSIDE_DOWN) {
					stage.setOrientation( StageOrientation.DEFAULT );
				} else {
					stage.setOrientation( event.afterOrientation );
				}*/
				
				//scaleStyles();
			}
			
			protected function resizeHandler() : void {
				
				
				
			}	
			
			protected function newDataHandler( e:Event ) : void {
				
				/* Get next update time */
				_nextUpdate = _dataProvider.getNextUpdateTime();
				
				/* Update data table */
				var data:Object = _dataProvider.getData(currency);				
				for( var type:String in data ) {
					_chartData[type] = data[type];
				}
				chartPanel.setLiveData(_chartData[_chartType]);
				
				/* Find last metal prices */
				findLastPrices();
				
				/* Update header */
				updateHeader();
				
				/* Update "My Stack" labels */
				updateMyStack();
				
				/* Show chart updated label */
				if((dataRange != Constants.RANGE_HISTORY) && (!_firstLoad)) {
					showChartUpdated();
				}
				
				/* On the first load zoom in current price. */ 
				if(_firstLoad) {
					
					callLater(chartPanel.zoom,[16, _currentPricesDate.time]);
					_firstLoad = false;
					
				}
				
				
				busy = false;
				
			}
			
			protected function historyLoadedHandler( e:Event ) : void {
				
				chartPanel.setHistData( _dataProvider.getHistory(_currency) );
				
			}			
			
			protected function timerHandler( e:Event ) : void {
				
				updateHeader();
				
			}
				
			
			public override function styleChanged(style:String) : void {
				
				super.styleChanged(style); invalidateProperties();
				
			}
			
			
			protected function fullScreenBtnClickHandler(event:MouseEvent):void
			{
				if(currentState == "fullscreen") {
					currentState = "normal";
					fullScreenBtn.selected = false;
				} else {
					currentState = "fullscreen";
					fullScreenBtn.selected = true;
				}
				
			}
			
			protected function  browse() : void {
				
				var file:FileReference = new FileReference();
				file.browse();
				
			}
		]]>
	</fx:Script>
	
	<!--
	
	//////////////////////////////////////////////////////
	//                                     				//
	//						Skin						//
	//													//
	//////////////////////////////////////////////////////
	
	-->
	
	<s:VGroup id="normalVGroup" width="100%" height="100%" gap="0" paddingLeft="5" paddingRight="5" paddingBottom="5" paddingTop="5">
		
		<s:HGroup id="header" width="100%">	
			<s:Spacer width="100%"/>
			<s:Label id="headerLabel" text="Next Live Price Update " styleName="myLabel fontBig" />	
			<s:Spacer width="20"/>
			<s:Label id="timeLabel" styleName="myLabel fontBig" />
			<s:Spacer width="100%"/>
		</s:HGroup>		
		
		<s:VGroup id="northPanel" width="100%" includeIn="normal" gap="0">
		
			<s:Spacer height="10"/>
			
			<s:HGroup id="metalBtnGroup" width="100%" verticalAlign="middle">
				
				<s:VGroup width="100%">	
					
					<s:HGroup width="100%">
						<!-- Curency drop-down -->
						<gpc:CustomDropDownList id="currencyCombo" 
												dataProvider="{new ArrayList(Constants.CURRENCIES)}" 
												styleName="myDropDown fontMedium"
												openButtonStyle="button bigButton"
												change="currency = currencyCombo.selectedItem" 
												interactionMode="touch" 
												touchDelay="200"/>
						<!-- Metal buttons-->
						<s:RadioButton id="goldBtn" group="{chartTypeRadioGroup}" value="{Constants.GOLD}" width="100%" styleName="button bigButton fontMedium" label="GOLD" />
						<s:RadioButton id="silverBtn" group="{chartTypeRadioGroup}" value="{Constants.SILVER}" width="100%" styleName="button bigButton fontMedium" label="SILVER" />
						<s:RadioButton id="platinumBtn" group="{chartTypeRadioGroup}" value="{Constants.PLATINUM}" width="100%" styleName="button bigButton fontMedium" label="PLATINUM" />
						<s:RadioButton id="palladiumBtn" group="{chartTypeRadioGroup}" value="{Constants.PALLADIUM}" width="100%" styleName="button bigButton fontMedium" label="PALLADIUM" />
					</s:HGroup>
					
				</s:VGroup>				
	
			</s:HGroup>	
			
			<s:Spacer height="10"/>
		
		</s:VGroup>

		<!-- Chart -->

		<s:Group width="100%" height="100%">			
			<gpc:Chart left="0" top="0" right="0" bottom="0" id="chartPanel"/>
			<s:Label id="chartUpdatedLbl" text="Chart updated" styleName="selected myLabel fontBig" visible="false" alpha="0" />
			<s:RadioButton id="fullScreenBtn" right="30" top="15" 					    
						   label="" 
						   styleName="button fontMedium" 
						   toolTip="Full screen"
						   selected="false" 
						   click="fullScreenBtnClickHandler(event)"
						   excludeFrom="settings"/>
		</s:Group>
		
		<s:Spacer height="5"/>
		
		<!-- Chart options group -->
		
		<s:VGroup id="southPanel" width="100%" excludeFrom="settings, fullscreen" gap="0">
			
			<s:HGroup id="chartDataBtnGroup" width="100%" verticalAlign="middle" gap="0">
				
				<!-- Chart data range buttons -->
				<s:RadioButton label="Last 3 Days" group="{rangeRadioGroup}" value="{Constants.RANGE_3DAYS}" skinClass="com.goldpricecafe.mobile.skins.ButtonBarFirstButton" styleName="button bigButton fontMedium"/>
				<s:RadioButton label="Today" group="{rangeRadioGroup}" value="{Constants.RANGE_1DAY}" skinClass="com.goldpricecafe.mobile.skins.ButtonBarMiddleButton" styleName="button bigButton fontMedium"/>
				<s:RadioButton id="historyBtn" label="History" group="{rangeRadioGroup}" value="{Constants.RANGE_HISTORY}" skinClass="com.goldpricecafe.mobile.skins.ButtonBarLastButton" styleName="button bigButton fontMedium"/>
				
				<s:Spacer width="7"/>
				
				<!-- Prices ratio buttons -->
				<s:RadioButton id="gldslvratioBtn" group="{chartTypeRadioGroup}" value="{Constants.GLD_SLV_RATIO}" label="Gld/Slv Ratio" width="100%" styleName="button bigButton fontMedium" />				
				
				<s:Spacer width="7"/>
				
				<s:RadioButton id="gldpltratioBtn" group="{chartTypeRadioGroup}" value="{Constants.GLD_PLT_RATIO}" label="Gld/Plt Ratio" width="100%" styleName="button bigButton fontMedium" />
				
				<s:Spacer width="7"/>
				
				<s:Button id="settingsBtn" label="Design" width="100%" styleName="button bigButton fontMedium" click="currentState = 'settings'" />
				
			</s:HGroup>
			
			<!-- Track your stack -->
		
			<s:Spacer height="5"/>
			
			<s:HGroup id="trackYourStackGroup" width="100%" verticalAlign="middle" gap="10">
			
				<s:Label id="pmcGoldLabel" text="GLD:" styleName="myLabel fontSmall" />
				<gpc:NumberInput id="goldOzCalc" maxChars="6" styleName="fontSmall" width="100%" numberFormater="{amountFormat}" numericValue="@{myStackGold}" softKeyboardType="number" needsSoftKeyboard="true"/>
				<s:Label id="pmcSilverLabel" text="SLV:" styleName="myLabel fontSmall" />
				<gpc:NumberInput id="silverOzCalc" maxChars="6" styleName="fontSmall" width="100%" numberFormater="{amountFormat}" numericValue="@{myStackSilver}" softKeyboardType="number" needsSoftKeyboard="true"/>
				<s:Label id="pmcPlatinumLabel" text="PLT:" styleName="myLabel fontSmall" />
				<gpc:NumberInput id="platinumOzCalc" maxChars="6" styleName="fontSmall" width="100%" numberFormater="{amountFormat}" numericValue="@{myStackPlatinum}" softKeyboardType="number" needsSoftKeyboard="true"/>
				<s:Label id="pmcPalladiumLabel" text="PLD:" styleName="myLabel fontSmall" />
				<gpc:NumberInput id="palladiumOzCalc" maxChars="6" styleName="fontSmall" width="100%" numberFormater="{amountFormat}" numericValue="@{myStackPalladium}" softKeyboardType="number" needsSoftKeyboard="true"/>			
				<s:RadioButton id="indivChartBtn" group="{chartTypeRadioGroup}" value="{Constants.MY_STACK}" label="Chart My Stack!" styleName="button bigButton fontMedium"/>					
		
				<!-- Units-->
				<s:RadioButton id="radioOunce" label="OZ" group="{unitsRedioGroup}" value="{Constants.UNITS_OZ}" styleName="radioBtn fontSmall" width="0%" toolTip="Ounces" />
				<s:RadioButton id="radioGram" label="GR" group="{unitsRedioGroup}" value="{Constants.UNITS_GR}" styleName="radioBtn fontSmall" width="0%" toolTip="Grams" />
				
			</s:HGroup>			
			
		</s:VGroup>
		
		<!-- Settings screen -->
		
		<!--s:HGroup id="settingsHGroup" width="100%" includeIn="settings" >
			<gpc:SettingsPanel id="settingsPanel"/>
			<s:Spacer width="5" />
			<s:VGroup>
				<s:Button id="cancelBtn" label="Reset" styleName="button bigButton fontMedium" width="100%" click="settingsPanel.reset()" />
				<s:Button id="okBtn" label="OK" styleName="button bigButton fontMedium" width="100%" click="CustomStyleManager.saveStyles(); currentState = 'normal'" />
				<s:Spacer height="100%"/>
			</s:VGroup>
		</s:HGroup-->	
		
		<gpc:DesignPanel id="designPanel" width="100%" includeIn="settings" exit="currentState = 'normal'"/>
		
	</s:VGroup>
	

	<!-- Busy screen -->
	
	<s:HGroup x="0" y="0" width="{width}" height="{height}" includeInLayout="false" excludeFrom="settings">
		<s:Spacer width="25%"/>
		<s:VGroup width="50%" height="100%">
			<s:Spacer height="20%"/>
			<s:BusyIndicator id="throbber" alpha="0.5" visible="true" width="100%" height="60%"/>
			<s:Spacer height="20%"/>			
		</s:VGroup>
		<s:Spacer width="25%"/>
	</s:HGroup>	
			
	
</s:Application>
