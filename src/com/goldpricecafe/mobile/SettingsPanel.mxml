<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:gpc="com.goldpricecafe.mobile.*"
		 width="100%" height="100%"
		 creationComplete="creationCompleteHandler(event)" xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>
	<fx:Script>
		<![CDATA[

			import mx.events.FlexEvent;			
			
			//////////////////////////////////////////////////////
			//                                     				//
			//					Public							//
			//													//
			//////////////////////////////////////////////////////				
			
			public function reset() : void {
				
				CustomStyleManager.resetStyles();
				synchronize();
				
			}
			
			//////////////////////////////////////////////////////
			//                                     				//
			//					Protected						//
			//													//
			//////////////////////////////////////////////////////	
			
			protected static const LINE_WIGHTS:Array = [1,2,3,4,5];
			
			protected function synchronize() : void {
				
				synchronizeFontColor();
				synchronizeBorderColor();
				synchronizeButtonColor();
				synchronizeSelectedColor();
				synchronizeBackgroundColor();
				synchronizeSerie1Style();
				synchronizeSerie2Style();
				synchronizeSerie3Style();
				
			}
			
			protected function synchronizeFontColor() : void {
				
				var val:Number;
				
				val = Number( CustomStyleManager.getStyle("global","color") );
				fontColorCC.selectedColor = val;
				
			}
			
			protected function synchronizeBorderColor() : void {			
				
				var val:Number  = Number( CustomStyleManager.getStyle("global","borderColor") );
				borderColorCC.selectedColor = val;
				
			}
			
			protected function synchronizeButtonColor() : void {
				
				var val:Number  = Number( CustomStyleManager.getStyle(".button","chromeColor") );
				buttonColorCC.selectedColor = val;
				
			}

			protected function synchronizeSelectedColor() : void {
				
				var val:Number  = Number( CustomStyleManager.getStyle(".selected","chromeColor") );
				highlightColorCC.selectedColor = val;
				
				val = Number( CustomStyleManager.getStyle(".selected","borderColor") );
				highlightBorderCC.selectedColor = val;				
				
			}
						
			protected function synchronizeBackgroundColor() : void {
				
				var val:Number  = Number( CustomStyleManager.getStyle("s|Application","backgroundColor") );
				backgroundColorCC.selectedColor = val;	
				
			}
				
			protected function synchronizeSerie1Style() : void {
				
				var val:Number  = Number( CustomStyleManager.getStyle("#chartPanel","serie1Color") );
				serie1ColorCC.selectedColor = val;
				
				serie1WidthSpinner.selectedValue = Number( CustomStyleManager.getStyle("#chartPanel","serie1Width") );
				
			}
				
			protected function synchronizeSerie2Style() : void {
				
				var val:Number  = Number( CustomStyleManager.getStyle("#chartPanel","serie2Color") );
				serie2ColorCC.selectedColor = val;
				
				serie2WidthSpinner.selectedValue = Number( CustomStyleManager.getStyle("#chartPanel","serie2Width") );
				
			}
				
			protected function synchronizeSerie3Style() : void {
				
				var val:Number  = Number( CustomStyleManager.getStyle("#chartPanel","serie3Color") );
				serie3ColorCC.selectedColor = val;
				
				serie3WidthSpinner.selectedValue = Number( CustomStyleManager.getStyle("#chartPanel","serie3Width") );
				
			}				
			
			protected function findForeColor( color:uint ) : uint {
				
				var red:uint = (color >> 16) & 0xFF;
				var green:uint = (color >> 8) & 0xFF;
				var blue:uint = color & 0xFF;
				 
				var gray:Number = 1 - ( 0.299 * red + 0.587 * green + 0.114 * blue)/255;
				
				if (gray < 0.5)
					return 0;
				else
					return 0xFFFFFF;								
				
			}

			//////////////////////////////////////////////////////
			//                                     				//
			//					Event handlers					//
			//													//
			//////////////////////////////////////////////////////
			
			protected function creationCompleteHandler(e:Event) : void {
				
				CustomStyleManager.addEventListener("stylesUpdated", function(event:Event) : void {
					synchronize();
				} );
				
				synchronize();
				
			}			
			
			protected function fontColorHandler(event:Event):void
			{				
				CustomStyleManager.setStyle("global","color",fontColorCC.selectedColor);	
				CustomStyleManager.setStyle("#chartPanel","axisColor",fontColorCC.selectedColor );
				CustomStyleManager.setStyle("s|BusyIndicator","symbolColor",fontColorCC.selectedColor );	
				synchronizeFontColor();
			}
			protected function fontFamilyHandler(event:Event):void
			{				
				/*TODO: Implement */
			}			
			
			
			protected function borderColorHandler(event:Event):void
			{
				CustomStyleManager.setStyle("global","borderColor",borderColorCC.selectedColor);
				synchronizeBorderColor();
			}
			
			protected function backgroundColorHandler(event:Event):void
			{
				CustomStyleManager.setStyle("s|Application","backgroundColor",backgroundColorCC.selectedColor);
				synchronizeBackgroundColor();
			}
			
			protected function buttonColorHandler(event:Event):void
			{
				CustomStyleManager.setStyle(".button","chromeColor",buttonColorCC.selectedColor);
				CustomStyleManager.setStyle("s|Button","chromeColor",buttonColorCC.selectedColor);
				synchronizeButtonColor();
			}
			
			protected function highlightColorHandler(event:Event):void
			{
				CustomStyleManager.setStyle(".selected","chromeColor",highlightColorCC.selectedColor);
				synchronizeSelectedColor();
			}
			
			protected function highlightBorderHandler(event:Event):void
			{
				CustomStyleManager.setStyle(".selected","borderColor",highlightBorderCC.selectedColor);
				synchronizeSelectedColor();
			}			
			
			protected function serie1ColorHandler(event:Event):void
			{
				CustomStyleManager.setStyle("#chartPanel","serie1Color",serie1ColorCC.selectedColor);
				synchronizeSerie1Style();
			}
			
			protected function serie1WeightHandler(event:Event):void
			{
				CustomStyleManager.setStyle("#chartPanel","serie1Width",serie1WidthSpinner.selectedValue);
				synchronizeSerie1Style();
			}			
			
			protected function serie2ColorHandler(event:Event):void
			{
				CustomStyleManager.setStyle("#chartPanel","serie2Color",serie2ColorCC.selectedColor);
				synchronizeSerie2Style();
			}
			
			protected function serie2WeightHandler(event:Event):void
			{
				CustomStyleManager.setStyle("#chartPanel","serie2Width",serie2WidthSpinner.selectedValue);
				synchronizeSerie2Style();
			}			
			
			protected function serie3ColorHandler(event:Event):void
			{
				CustomStyleManager.setStyle("#chartPanel","serie3Color",serie3ColorCC.selectedColor);
				synchronizeSerie3Style();
			}
			
			protected function serie3WeightHandler(event:Event):void
			{
				CustomStyleManager.setStyle("#chartPanel","serie3Width",serie3WidthSpinner.selectedValue);
				synchronizeSerie3Style();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:VGroup id="settingsLabelsGroup" height="100%">
		<s:Spacer height="100%"/>
		<s:Label text="Fonts" styleName="fontMedium"/>
		<s:Spacer height="200%"/>
		<s:Label text="Borders" styleName="fontMedium"/>
		<s:Spacer height="200%"/>
		<s:Label text="Background" styleName="fontMedium"/>
		<s:Spacer height="200%"/>
		<s:Label text="Buttons" styleName="fontMedium"/>	
		<s:Spacer height="200%"/>
		<s:Label text="Selected color" styleName="fontMedium"/>
		<s:Spacer height="200%"/>
		<s:Label text="Selected border" styleName="fontMedium"/>
		<s:Spacer height="200%"/>
		<s:Label text="Serie 1" styleName="fontMedium"/>
		<s:Spacer height="200%"/>
		<s:Label text="Serie 2" styleName="fontMedium"/>
		<s:Spacer height="200%"/>
		<s:Label text="Serie 3" styleName="fontMedium"/>
		<s:Spacer height="100%"/>		
	</s:VGroup>
	<s:Spacer width="10" />
	<s:VGroup id="settingsValuesGroup" height="100%" width="100%" styleName="fontSmall">
		<s:HGroup width="100%" height="100%">
			<mx:ColorPicker id="fontColorCC" width="70%" height="100%" change="fontColorHandler(event)"/>
			<gpc:HSpinner id="fontFamilySpinner" width="40%" height="100%" change="fontFamilyHandler(event)">
				<s:ArrayCollection source="[Michroma]"/>
			</gpc:HSpinner>
		</s:HGroup>	
		<mx:ColorPicker id="borderColorCC" width="100%" height="100%" change="borderColorHandler(event)"/>
		<mx:ColorPicker id="backgroundColorCC" width="100%" height="100%" change="backgroundColorHandler(event)"/>
		<mx:ColorPicker id="buttonColorCC" width="100%" height="100%" change="buttonColorHandler(event)"/>	
		<mx:ColorPicker id="highlightColorCC" width="100%" height="100%" change="highlightColorHandler(event)"/>
		<mx:ColorPicker id="highlightBorderCC" width="100%" height="100%" change="highlightBorderHandler(event)"/>	
		<s:HGroup width="100%" height="100%">
			<mx:ColorPicker id="serie1ColorCC" width="70%" height="100%" change="serie1ColorHandler(event)"/>
			<gpc:HSpinner id="serie1WidthSpinner" width="40%" height="100%" change="serie1WeightHandler(event)">
				<s:ArrayCollection source="{LINE_WIGHTS}"/>
			</gpc:HSpinner>
		</s:HGroup>		
		<s:HGroup width="100%" height="100%">
			<mx:ColorPicker id="serie2ColorCC" width="70%" height="100%" change="serie2ColorHandler(event)"/>
			<gpc:HSpinner id="serie2WidthSpinner" width="40%" height="100%" change="serie2WeightHandler(event)">
				<s:ArrayCollection source="{LINE_WIGHTS}"/>
			</gpc:HSpinner>
		</s:HGroup>
		<s:HGroup width="100%" height="100%">
			<mx:ColorPicker id="serie3ColorCC" width="70%" height="100%" change="serie3ColorHandler(event)"/>
			<gpc:HSpinner id="serie3WidthSpinner" width="40%" height="100%" change="serie3WeightHandler(event)">
				<s:ArrayCollection source="{LINE_WIGHTS}"/>
			</gpc:HSpinner>
		</s:HGroup>		
	</s:VGroup>	
	
</s:Group>
